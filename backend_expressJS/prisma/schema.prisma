// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentMessages     Message[]    @relation(name: "SentMessages")
  receivedMessages Message[]    @relation(name: "ReceivedMessages")
  connectionsA     Connection[] @relation(name: "UserAConnections")
  connectionsB     Connection[] @relation(name: "UserBConnections")
}

model Message {
  id               String   @id @default(uuid())
  senderUsername   String
  receiverUsername String
  text             String
  status           Status   @default(SENT)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  sender   User @relation(name: "SentMessages", fields: [senderUsername], references: [username])
  receiver User @relation(name: "ReceivedMessages", fields: [receiverUsername], references: [username])
}

model Connection {
  id            String           @id @default(uuid())
  userA         User             @relation(name: "UserAConnections", fields: [userAUsername], references: [username])
  userB         User             @relation(name: "UserBConnections", fields: [userBUsername], references: [username])
  userAUsername String
  userBUsername String
  status        ConnectionStatus @default(PENDING) // Tracks request status
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([userAUsername, userBUsername])
}

enum Status {
  SENT
  RECEIVED
  SEEN
}

enum ConnectionStatus {
  PENDING // Request sent but not yet accepted
  ACCEPTED // Request accepted, users are now friends
  DELETED // Friend request rejected or friendship removed
}
